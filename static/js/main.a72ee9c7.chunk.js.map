{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","SearchBar","term","location","sotBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOptions","sortByOption","sortBy","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","handleSortByChange","getSortByClass","key","renderSortByOptions","placeholder","onChange","App","console","log","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a72ee9c7.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css'\n\nclass Business extends React.Component {\n\n  render(){\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src={this.props.business.imageSrc} alt='resturant'/>\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>{this.props.business.state}, {this.props.business.zipCode}</p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category}</h3>\n            <h3 className=\"rating\">{this.props.business.rating}</h3>\n            <p>{this.props.business.reviewCount}</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Business;\n","import React from 'react';\nimport './BusinessList.css';\n\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className=\"BusinessList\">\n        {\n          this.props.businesses.map(business => {\n            return <Business business={business} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      term: '',\n      location: '',\n      sotBy: 'best_match',\n    };\n\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n\n    this.sortByOptions = {\n      'Best Match': 'best_match',\n      'Highest Rated': 'rating',\n      'Most Reviewed': 'review_count'\n    };\n  };\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return 'active';\n    }\n    return '';\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({ sortBy: sortByOption });\n  };\n\n  handleTermChange(event){\n    this.setState({term: event.target.value});\n  };\n\n  handleLocationChange(event){\n    this.setState({location: event.target.value});\n  };\n\n  handleSearch(event) {\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n\n    event.preventDefault()\n  };\n\n  renderSortByOptions() {\n    return Object.keys(this.sortByOptions)\n      .map(sortByOption => {\n        let sortByOptionValue = this.sortByOptions[sortByOption];\n        return <li\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n          className={this.getSortByClass(sortByOptionValue)}\n          key={sortByOptionValue}\n        >\n          {sortByOption}\n        </li>;\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input\n            placeholder=\"Search Businesses\"\n            onChange={this.handleTermChange}\n          />\n          <input\n            placeholder=\"Where?\"\n            onChange={this.handleLocationChange}\n          />\n        </div>\n        <div\n          onClick={this.handleSearch}\n          className=\"SearchBar-submit\"\n        >\n          <a>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\n\nconst business = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Bordertown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n};\n\nconst businesses = [\n  business,\n  business,\n  business,\n  business,\n  business,\n  business\n];\n\nclass App extends React.Component {\n  searchYelp(term, location, sortBy) {\n    console.log('Searching Yelp with', term, location, sortBy);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}